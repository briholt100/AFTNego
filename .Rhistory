#dd<-cbind(a[1:2],b[1:2])
dd <- dd[-42, ] # this point breaks linear separation (at least w/o intercept)
dm <- data.matrix(dd[sample(nrow(dd),10,replace=T), 1:2])
dm <- cbind(dm, 1) # to add intercept to the separating plane
dc <- rep(1, nrow(dm))
dc[dd$Species == "virginica"] <- -1
#dc[dd[,1]]<- -1
dd
dm
dc
nrow(dc)
nrow(dm)
nrow(dD)
nrow(dd)
source('~/.active-rstudio-document', echo=TRUE)
dd <- iris[iris$Species != "versicolor", -(3:4)]
#dd<-cbind(a[1:2],b[1:2])
dd <- dd[-42, ] # this point breaks linear separation (at least w/o intercept)
dm <- data.matrix(dd[sample(nrow(dd),10,replace=T), 1:2])
dm <- cbind(dm, 1) # to add intercept to the separating plane
dc <- rep(1, nrow(dm))
dc[dd$Species == "virginica"] <- -1
#dc[dd[,1]]<- -1
trainPerceptron <- function(dm, dc) {
result <- list()
oldW <- c()
w <- rep(0, ncol(dm))
while (!identical(w, oldW)) {
oldW <- w
for (i in 1:nrow(dm)) {
pred <- sign(dm[i,] %*% w)
w = w + (dc[i] - pred) * dm[i, ]
}
# cat(w, "\n")
result <- c(result, list(w))
}
result
}
plotPerceptronSteps <- function(pcResult, dm, dc, steps) {
for (s in steps) {
w <- pcResult[[s]]
plot(dm[,1:2], main=paste("step", s), pch=ifelse(dc > 0, 1, 2), sub=paste(w, collapse=' '))
abline(-w[3] / w[2], -w[1] / w[2])
}
pc <- trainPerceptron(dm, dc)
pc
plotPerceptronSteps(pc, dm, dc, length(pc))
a<-rep(1,10)
b<-runif(10,-1,1)
c<-rep(.1,10)
d<-3*b+c
#d[d==0]<- -1
trainDF<-data.frame(a,b,c,d)
w<-rep(0,3)
learning.rate<-.1
threshold<-.5
made.mistake<-TRUE
if(trainDF[i,4] != f(x)){
w<-w+learn.rate*trainDF[i,4]*trainDF[i,1:3]
b<-b+learn.rate*trainDF[i,4]*R^2
k<-k+1
made.mistake<-TRUE
}
perceptron = function(x, y, learning.rate=1) {
w = vector(length = ncol(x)) # Initialize the parameters
b = 0
k = 0 # Keep track of how many mistakes we make
made.mistake<-TRUE
euclidean.norm<-function(x){return(sqrt(sum(x^2)))}
R = max(euclidean.norm(x))
made.mistake <- TRUE # Initialized so we enter the while loop
while (made.mistake==T) {
made.mistake=FALSE # Presume that everything's OK
for (i in 1:nrow(x)) {
if(y[i] != sum(x[i,1:3]*w)+b) {
w<-w+learning.rate*y[i]*x[i,1:3]
b<-b+learning.rate*y[i]*R^2
k<-k+1
made.mistake<-TRUE # Doesn't matter if already set to TRUE previously
#print(w<-w)
#print(b<-b)
print(k)
}
print(w<-w)
print(b<-b)
print(k<-k)
}
perceptron(trainDF[,1:3],trainDF[,4])
classify.linear = function(x,w,b) {
distance.from.plane = function(z,w,b) { sum(z*w) + b }
distances = apply(x, 1, distance.from.plane)
return(ifelse(distances < 0, -1, +1))
}
perceptron = function(x, y, learning.rate=1) {
w = vector(length = ncol(x)) # Initialize the parameters
b = 0
k = 0 # Keep track of how many mistakes we make
euclidean.norm<-function(x){return(sqrt(sum(x^2)))}
R = max(euclidean.norm(x))
made.mistake = TRUE # Initialized so we enter the while loop
while (made.mistake) {
made.mistake=FALSE # Presume that everything's OK
for (i in 1:nrow(x)) {
if (y[i] != classify.linear(x[,i],w,b)) {
w <- w + learning.rate * y[i]*x[,i]
b <- b + learning.rate * y[i]*R^2
k <- k+1
made.mistake=TRUE # Doesn't matter if already set to TRUE previously
}
return(w=w,b=b,mistakes.made=k)
}
x<-matrix(1:12,ncol=3)
y=c(1,1,0,1)
perceptron(x,y)
qexp(.25,1/5)
qexp(.5,2)
qexp(.5,1/2)
- `require()` loads an external package to offer tools not included in R's core functionality.
- `ggplot2` is a package for graphing data that will exceed your wildest imagination
- `lubridate` provides tools for making working with dates slightly less hateful
- `plyr` allows extremely sophisticated grouping and summarizing
```{r loadpackages}
#  install.packages(c('ggplot2','lubridate','plyr'))
require(ggplot2)
require(lubridate)
require(plyr)
load(tutorial.rmd)
# Using R for Analysis
## Get R Ready for Analysis
- `require()` loads an external package to offer tools not included in R's core functionality.
- `ggplot2` is a package for graphing data that will exceed your wildest imagination
- `lubridate` provides tools for making working with dates slightly less hateful
- `plyr` allows extremely sophisticated grouping and summarizing
```{r loadpackages}
#  install.packages(c('ggplot2','lubridate','plyr'))
require(ggplot2)
require(lubridate)
require(plyr)
```
??read.text
??read.csv
??getURL
get(wd)
getwd()
dir
dir()
getwd(/)
getwd(\)
getwd(..AFT_Data)
getwd(./AFT_Data)
getwd(./AFT Data)
getwd("./AFT Data")
getwd("./AFT_Data")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/My Data Sources/AFT Data")
getwd("../")
setwd("../")
getwd()
setwd("./AFT Data")
getwd()
dir()
read.csv("./WorkloadEquityOfficeHoursApril24.csv", header=T, sep=",")
workload<-read.csv("./WorkloadEquityOfficeHoursApril24.csv", header=T, sep=",")
dim(workload)
summary(workload)
head(workload)
read.csv("./WorkloadEquityOfficeHoursApril24.csv", header=T, sep=\t)
read.csv("./WorkloadEquityOfficeHoursApril24.csv", header=T, sep="\t")
workload<-read.csv("./WorkloadEquityOfficeHoursApril24.csv", header=T, sep="\t")
dim(workload)
head(workload)
summary(workload)
names(workload)
colnames(workload)<-c("response","support.office","support.Other","what input","program","fulltime",which campus")
colnames(workload)<-c("response","support.office","support.Other","what.input","program","fulltime","which.campus")
head(workload)
names(workload)
table(workload$support.office)
table(workload$support.office,program)
table(workload$support.office,workload$program)
t(table(workload$support.office,workload$program))
grep("abe",workload$program,ignore.case=T)
grep("abe|esl",workload$program,ignore.case=T)
grep("abe|esl",workload$program,ignore.case=T,values=T)
grep("abe|esl",workload$program,ignore.case=T,fixed=T)
grep("abe|esl",workload$program,ignore.case=T, value=T)
grep("abe|esl|bt.*",workload$program,ignore.case=T, value=T)
grep("b&.*|abe|esl|bt.*",workload$program,ignore.case=T, value=T)
length(grep("b&.*|abe|esl|bt.*",workload$program,ignore.case=T, value=T))
length(grep("bit|b&.*|abe|esl|bt.*",workload$program,ignore.case=T, value=T))
(grep("bit|b&.*|abe|esl|bt.*",workload$program,ignore.case=T, value=T))
bts<-(grep("b&.*|abe|esl|bt.*",workload$program,ignore.case=T, value=F))
t(table(workload$support.office,workload$program[!=bts]))
t(table(workload$support.office,workload$program[==bts]))
t(table(workload$support.office,workload$program==bts))
t(table(workload$support.office,workload$program!=bts))
t(table(workload$support.office!=bts,workload$program!=bts))
t(table(workload$support.office!=bts))
t(table(workload$support.office[bts]))
t(table(workload$support.office[!bts]))
t(table(workload$support.office[-bts]))
t(table(workload$support.office[-bts],workload$program[-bts]))
table
??table
plot(t(table(workload$support.office[-bts],workload$program[-bts])))
hist(t(table(workload$support.office[-bts],workload$program[-bts])))
A<-(t(table(workload$support.office[-bts],workload$program[-bts])))
addmargins(A)
names(workload)
ggplot(data = workload, aes(x = fulltime, y = count, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) + xlab("fulltime") +
ylab("number of respondents")
require(ggplot)
library(ggplot)
library(ggplot2)
ggplot(data = workload, aes(x = fulltime, y = count, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) + xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) + xlab("fulltime") +
ylab("number of respondents")
geom_points
??ggplot
geom_point
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_point(stat = "identity") +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_scattert(stat = "identity") +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_scatter(stat = "identity") +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_plot(stat = "identity") +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = response, fill = support.office)) +
geom_line(stat = "identity") +
xlab("fulltime") +
ylab("number of respondents")
str(workload)
ggplot(data = workload, aes(x = fulltime,  fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = which.campus, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = 1:nrow(workload), fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = nrow(workload), fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of respondents")
ggplot(data = workload, aes(x = fulltime, y = support.office, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of something")
ggplot(data = workload, aes(x = fulltime, y = y, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of something")
ggplot(data = workload, aes(x = fulltime, y = 1, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of something")
workloadBar<-ggplot(data = workload, aes(x = fulltime, y = 1, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
xlab("fulltime") +
ylab("number of something")
by(workloadBar,workload$which.campus)
??with
plot(workload)
plot(workload~workload$which.campus)
histogram(~workload$which.campus)
hist(~workload$which.campus)
hist(workload$which.campus)
hist(workload)
hist(workload$support.office)
bar(workload$support.office)
barchart(workload$support.office)
hist(count(workload$support.office))
hist(A)
table(workload$support.office)
hist(table(workload$support.office))
hist(table(workload$support.office)~workload$which.campus)
hist(table(workload$support.office)|workload$which.campus)
hist(table(workload$support.office[workload$which.campus=="North"]))
levels(workload$which.campus)
hist(table(workload$support.office[workload$which.campus=="Central,North"]))
hist(table(workload$support.office[workload$which.campus=="Central,North"]),col=workload$support.office)
hist(table(workload$support.office[workload$which.campus=="North"]),col=workload$support.office)
hist(table(workload$support.office[workload$which.campus=="Central"]),col=workload$support.office)
workloadBar<-ggplot(data = workload, aes(x = fulltime, y = 1, fill = support.office)) +
geom_bar(stat = "identity", position = position_stack(width = 0.9)) +
facet_grid (variable ~ workload$which.campus)+
xlab("fulltime") +
ylab("number of something")
workloadBar
plot(workload$support.office~workload$which.campus)
plot(workload$support.office~workload$which.campus*workload$fulltime)
plot(workload$support.office~workload$fulltime)
myPlot<-function(df,index,y,xlab,ylab) {
plot(df[,index] ~ df$y,
main=names(df[index],
pch=16,
xlab="X label",
ylab=names(df)[index])}
myPlot<-function(df,index,y,xlab,ylab) {
plot(df[,index] ~ df$y,
main=names(df[index],
pch=16,
xlab="X label",
ylab=names(df)[index]))
}
names(workload)
myPlot(workload,5,workload$support.office)
myPlot(workload,5,workload$support.office,"program",df[,1])
myPlot(workload,5,workload$support.office,"program",df[,5])
myPlot<-function(df,index,y) {
plot(df[,index] ~ df$y,
main=names(df[index],
pch=16,
#                  xlab="X label",
#                 ylab=names(df)[index]
)
}
myPlot(workload,5,workload$support.office)
myPlot<-function(df,index,y) {
plot(df[,index] ~ df$y,
main=names(df[index],
pch=16
#                  xlab="X label",
#                 ylab=names(df)[index]
)
}
myPlot(workload,5,workload$support.office)
myPlot<-function(df,index,y) {
plot(df[,index] ~ df$y
#main=names(df[index],
#          pch=16
#                  xlab="X label",
#                 ylab=names(df)[index]
)
}
myPlot(workload,5,workload$support.office)
require(RCurl)
library(ggplot2)
#note that google doc must be published to CSV
prezSearch2013<- "https://docs.google.com/spreadsheet/pub?key=0AnDE-SHhWCM4dHFmek45aGh0S2V0U2RyWUdpd1o4VkE&single=true&gid=0&output=csv"
tc <- getURL(prezSearch2013, ssl.verifypeer=FALSE)
pollData <- read.csv(textConnection(tc),header=T)
str(pollData)
dim(pollData)
names(pollData)
colnames(pollData) <- c("timestamp","list","explain","alt1","alt2","alt3","comment","Status")
names(pollData)
#first remove parantheses, make a title column
#Then str split, but how to make those into coloumns?
pollData$names<-pollData$list #creates new variable
pollData$names<-gsub("Central VPI|Associate Vice Chancellor \\(B\\.A\\.S District coordinator\\)|sccc|-north|District Liason Gates grants \\(former |vice chancellor for finance & technology|north vpi|north vice president|Retired \\(total speculation\\)|--|, administrative services",""
,as.character(pollData$names),ignore.case=T)
pollData$names<-gsub("jensen)","Jensen",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("pete|peter","Peter",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" Ores","Ores",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("gayla shoemaker","Gayla Shoemake",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("gayla|Gayla Shoemake|Gayla Shoemake Shoemake","Gayla Shoemake",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" ?","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" Ores","Ores",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" ?","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
table(pollData$names)
list<-(strsplit(as.character(pollData$names),","))
table(unlist(list))
pie(table(unlist(list)),col=rainbow(nrow(table(unlist(list)))),main="Pie Chart of Potential Acting Presidents")
list.final<-unlist(list)
sans.ward<-table(list.final[list.final!="Alan Ward"])
df<-data.frame(sans.ward)
df.sort<-df[order(df$Freq),]
b<-barplot(df.sort$Freq, names.arg=unique(df.sort$Var1),horiz=F
,axes=T, axisnames = FALSE
#        ,legend.text=df$Var1
,col=rainbow(length(df.sort$Var1))
,main="Potential Acting Presidents"
,xlab="Note that Alan Ward has been removed")
#text(b,0,df.sort$Var1,cex=.5,pos=3)
legend("topleft", legend=df.sort$Var1, cex=.7,
bty="n", fill=rainbow(length(df.sort$Var1)))
grep("dr.",pollData$names,ignore.case=T,value=T)
pollData$names<-sub("dr.","",as.character(pollData$names),ignore.case=T)
grep("dr.",pollData$names,ignore.case=T,value=T)
table(pollData$names)
list<-(strsplit(as.character(pollData$names),","))
table(unlist(list))
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" ?","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
table(pollData$names)
list<-(strsplit(as.character(pollData$names),","))
table(unlist(list))
pie(table(unlist(list)),col=rainbow(nrow(table(unlist(list)))),main="Pie Chart of Potential Acting Presidents")
list.final<-unlist(list)
sans.ward<-table(list.final[list.final!="Alan Ward"])
df<-data.frame(sans.ward)
df.sort<-df[order(df$Freq),]
b<-barplot(df.sort$Freq, names.arg=unique(df.sort$Var1),horiz=F
,axes=T, axisnames = FALSE
#        ,legend.text=df$Var1
,col=rainbow(length(df.sort$Var1))
,main="Potential Acting Presidents"
,xlab="Note that Alan Ward has been removed")
#text(b,0,df.sort$Var1,cex=.5,pos=3)
legend("topleft", legend=df.sort$Var1, cex=.7,
bty="n", fill=rainbow(length(df.sort$Var1)))
pollData[pollData[4]=="Tracy Furutani" | pollData[5]=="Tracy Furutani" , c(4:6)]
pete.tracy<-grep("tracy|pete",pollData$list,ignore.case=T,value=F)  #this should find "list" items including tracy or pete
pollData[pete.tracy & pollData[4]=="Tracy Furutani" | pollData[5]=="Tracy Furutani"  , c(9,4:6)]
#this should pull just those records with Tracy in both fields
pollData[c(3,7)]  #comments
mary.list<-grep("mary",pollData$explain,ignore.case=T,value=F)
mary.list
pollData$comment
mary.list<-grep("mary",c(pollData$explain,pollData$comment),ignore.case=T,value=F)
mary.list
grep("mary",c(pollData$explain,pollData$comment),ignore.case=T,value=F)
mary.list<-grep("mary",pollData$explain & pollData$comment,ignore.case=T,value=F)
grep("mary",pollData$comment,ignore.case=T,value=F)
mary.list<-grep("mary",pollData$explain,ignore.case=T,value=F) & grep("mary",pollData$comment,ignore.case=T,value=F)
mary.list<-grep("mary",pollData$explain,ignore.case=T,value=F) + grep("mary",pollData$comment,ignore.case=T,value=F)
mary.list
mary.list<-c(mary.list,grep("mary",pollData$comment,ignore.case=T,value=F))
mary.list
pollData$explain[mary.list]
names(pollData)
pollData[mary.list,c(3,7)]
str(pollData)
??index
??index
names(pollData)
pollData$index<-as.factor(pollData$timestamp)
pollData$index
pollData$index<-as.numeric(as.factor(pollData$timestamp))
pollData$index
pollData
prezSearch2013<- "https://docs.google.com/spreadsheet/pub?key=0AnDE-SHhWCM4dHFmek45aGh0S2V0U2RyWUdpd1o4VkE&single=true&gid=0&output=csv"
tc <- getURL(prezSearch2013, ssl.verifypeer=FALSE)
pollData <- read.csv(textConnection(tc),header=T)
str(pollData)
dim(pollData)
names(pollData)
colnames(pollData) <- c("timestamp","list","explain","alt1","alt2","alt3","comment","Status")
names(pollDat)
#first remove parantheses, make a title column
#Then str split, but how to make those into coloumns?
pollData$index<-as.numeric(as.factor(pollData$timestamp))
pollData$names<-pollData$list #creates new variable
pollData$names<-gsub("Central VPI|Associate Vice Chancellor \\(B\\.A\\.S District coordinator\\)|sccc|-north|District Liason Gates grants \\(former |vice chancellor for finance & technology|north vpi|north vice president|Retired \\(total speculation\\)|--|, administrative services",""
,as.character(pollData$names),ignore.case=T)
pollData$names<-gsub("jensen)","Jensen",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("pete|peter","Peter",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" Ores","Ores",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("gayla shoemaker","Gayla Shoemake",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("gayla|Gayla Shoemake|Gayla Shoemake Shoemake","Gayla Shoemake",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" ?","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" Ores","Ores",as.character(pollData$names),ignore.case=T)
pollData$names<-sub("dr.","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(" ?","",as.character(pollData$names),ignore.case=T)
pollData$names<-sub(", ",",",as.character(pollData$names),ignore.case=T)
grep("dr.",pollData$names,ignore.case=T,value=T)
table(pollData$names)
list<-(strsplit(as.character(pollData$names),","))
table(unlist(list))
pie(table(unlist(list)),col=rainbow(nrow(table(unlist(list)))),main="Pie Chart of Potential Acting Presidents")
list.final<-unlist(list)
sans.ward<-table(list.final[list.final!="Alan Ward"])
df<-data.frame(sans.ward)
df.sort<-df[order(df$Freq),]
b<-barplot(df.sort$Freq, names.arg=unique(df.sort$Var1),horiz=F
,axes=T, axisnames = FALSE
#        ,legend.text=df$Var1
,col=rainbow(length(df.sort$Var1))
,main="Potential Acting Presidents"
,xlab="Note that Alan Ward has been removed")
#text(b,0,df.sort$Var1,cex=.5,pos=3)
legend("topleft", legend=df.sort$Var1, cex=.7,
bty="n", fill=rainbow(length(df.sort$Var1)))
cbind(pollData$list,pollData$index)
pollData$list
cbind(pollData[,3],pollData$index)
pollData[,3
]
data.frame(pollData[,3],pollData$index)
data.frame(pollData[,2],pollData$index)
data.frame(pollData$names,pollData$index)
data.frame(pollData$index,pollData$names,pollData$alt1,pollData$alt2)
names.tbl<-data.frame(pollData$index,pollData$names,pollData$alt1,pollData$alt2, pollData$alt3)
head(names.tbl)
names.tble
names.tbl
